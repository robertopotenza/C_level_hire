generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  targetSalary  Int?
  weeklyRate    Float?

  profile       Profile?
  subscription  Subscription?
  applications  Application[]
  autoApplySettings AutoApplySettings?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Profile {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])

  currentRole     String?
  currentSalary   Int?
  yearsExperience Int?
  location        String?
  linkedinUrl     String?
  skills          String? // Changed from Json to String for SQLite compatibility

  // Autoapply-specific fields
  phone           String?
  address         String?
  workEligibility String?
  resumeUrl       String?
  coverLetter     String?
  preferences     String? // JSON string for job preferences
  
  // Profile completion tracking
  personalInfoComplete    Boolean @default(false)
  experienceComplete      Boolean @default(false)
  educationComplete       Boolean @default(false)
  skillsComplete          Boolean @default(false)
  
  completionPercentage    Int @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Subscription {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])

  plan             String
  status           String
  weeklyRate       Float
  nextBillingDate  DateTime

  stripeCustomerId String?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Application {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  jobTitle      String
  company       String
  jobUrl        String
  status        String
  appliedAt     DateTime @default(now())

  matchScore    Float?
  resumeVersion String?
  
  // Autoapply-specific fields
  atsType       String?
  applicationMethod String?
  errorMessage  String?
  retryCount    Int @default(0)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AutoApplySettings {
  id                    String   @id @default(uuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id])

  isEnabled             Boolean  @default(false)
  maxDailyApplications  Int      @default(10)
  targetRoles          String?   // JSON string array
  excludedCompanies    String?   // JSON string array
  minSalary            Int?
  maxSalary            Int?
  preferredLocations   String?   // JSON string array
  remoteOnly           Boolean  @default(false)

  lastScanAt           DateTime?
  nextScanAt           DateTime?
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Job {
  id              String   @id @default(uuid())
  title           String
  company         String
  location        String?
  salary          String?
  description     String?
  requirements    String?
  url             String   @unique
  atsType         String?
  
  isActive        Boolean  @default(true)
  lastScannedAt   DateTime @default(now())
  
  applications    JobApplication[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model JobApplication {
  id          String   @id @default(uuid())
  jobId       String
  job         Job      @relation(fields: [jobId], references: [id])
  userId      String
  
  status      String   // pending, applied, failed, skipped
  appliedAt   DateTime?
  errorMessage String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([jobId, userId])
}
