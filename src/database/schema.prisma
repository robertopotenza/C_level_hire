// C-Level Hire AI Agent Platform Database Schema
// Based on the working Apply Autonomously project structure

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid()) @map("user_id")
  email           String            @unique
  passwordHash    String?           @map("password_hash")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")
  
  // Relations
  jobPreferences  JobPreferences?
  profile         Profile?
  eligibility     Eligibility?
  screeningAnswers ScreeningAnswers[]
  magicLinkTokens MagicLinkToken[]
  
  @@map("users")
}

model MagicLinkToken {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  token       String   @unique
  expiresAt   DateTime
  usedAt      DateTime?
  
  createdAt   DateTime @default(now())
  
  @@map("magic_link_tokens")
}

model JobPreferences {
  id                  String   @id @default(uuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  desired_roles       String[] // Array of desired job titles/roles
  experience_level    String?  // entry, mid, senior, executive
  salary_min          Int?
  salary_max          Int?
  location_preference String?  // remote, hybrid, onsite
  preferred_locations String[] // Array of preferred cities/states
  willing_to_relocate Boolean  @default(false)
  visa_sponsorship    Boolean  @default(false)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("job_preferences")
}

model Profile {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  first_name        String?
  last_name         String?
  phone             String?
  address           String?
  linkedin_url      String?
  website_url       String?
  
  current_title     String?
  current_company   String?
  years_experience  Int?
  
  resume_url        String?
  cover_letter_template String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("profiles")
}

model Eligibility {
  id                    String   @id @default(uuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  work_authorization    String?  // citizen, permanent_resident, h1b, f1_opt, etc.
  security_clearance    String?  // none, secret, top_secret, etc.
  felony_conviction     Boolean  @default(false)
  drug_test_willing     Boolean  @default(true)
  background_check_willing Boolean @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("eligibility")
}

model ScreeningAnswers {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  question  String
  answer    String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("screening_answers")
  @@index([userId])
}
